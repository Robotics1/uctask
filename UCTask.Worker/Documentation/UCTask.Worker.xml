<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UCTask.Worker</name>
    </assembly>
    <members>
        <member name="T:UCTask.Worker.DependentWorkerDictionary">
            <summary>
            A class representing a dictionary for dependent workers. The keys of the disctionary is case-insensitive strings.
            </summary>
        </member>
        <member name="M:UCTask.Worker.DependentWorkerDictionary.Add(System.String,UCTask.Worker.WorkerBase)">
            <summary>
            Adds a dependent worker to the items collection.
            </summary>
            <param name="key">The unique case-insensitive key for the worker to be added.</param>
            <param name="dependentWorker">The worker to add.</param>
            <returns>A bool indicating whether the worker was added to the items collection or not.</returns>
            <remarks>If the key already exists in the dictionary, the worker will not be added and the method will return false.</remarks>
        </member>
        <member name="M:UCTask.Worker.DependentWorkerDictionary.Remove(System.String)">
            <summary>
            Removes a worker from the items collection.
            </summary>
            <param name="key">The unique case-insensitive key for the worker to be removed.</param>
            <returns>If the key was found in the dictionary, returns the worker that was removed, else returns null.</returns>
        </member>
        <member name="M:UCTask.Worker.DependentWorkerDictionary.ContainsKey(System.String)">
            <summary>
            Determines if the <see cref="T:UCTask.Worker.DependentWorkerDictionary"/> contains the specified key.
            </summary>
            <param name="key">The unique case-insensitive key for the worker to be searched.</param>
            <returns>A bool indicating whether the key exists in the dictionary or not.</returns>
        </member>
        <member name="P:UCTask.Worker.DependentWorkerDictionary.Item(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>A <see cref="T:UCTask.Worker.WorkerBase"/> associated with the specified key.</returns>
        </member>
        <member name="P:UCTask.Worker.DependentWorkerDictionary.Keys">
            <summary>
            Gets a collection containing the keys in teh <see cref="T:UCTask.Worker.DependentWorkerDictionary"/>.
            </summary>
        </member>
        <member name="T:UCTask.Worker.WorkerState">
            <summary>
            An enumeration that represents the different states of a worker.
            </summary>
        </member>
        <member name="F:UCTask.Worker.WorkerState.Stopped">
            <summary>
            Indicates that the worker is in a 'Stopped' state.
            </summary>
        </member>
        <member name="F:UCTask.Worker.WorkerState.Starting">
            <summary>
            Indicates that the worker is in a 'Starting' state. That is, the worker is busy starting.
            </summary>
        </member>
        <member name="F:UCTask.Worker.WorkerState.Started">
            <summary>
            Indicates that the worker is in a 'Started' state.
            </summary>
        </member>
        <member name="F:UCTask.Worker.WorkerState.Stopping">
            <summary>
            Indicates that the worker is in a 'Stopping' state. That is, the worker is busy stopping.
            </summary>
        </member>
        <member name="T:UCTask.Worker.WorkerBase">
            <summary>
            An abstract base class that provides basic thread, start and stop operations.
            </summary>
        </member>
        <member name="P:UCTask.Worker.WorkerBase.WorkerState">
            <summary>
            Represents the state of the worker. <see cref="P:UCTask.Worker.WorkerBase.WorkerState"/>
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerBase.Start">
            <summary>
            Starts the worker.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerBase.Stop">
            <summary>
            Stops the worker.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerBase.OnRunStarting(System.Threading.CancellationToken)">
            <summary>
            Implementing classes can override <see cref="M:UCTask.Worker.WorkerBase.OnRunStarting(System.Threading.CancellationToken)"/> which is called at the beginning of a start operation. <see cref="M:UCTask.Worker.WorkerBase.Start"/>
            </summary>
            <param name="cancellationToken">The cancellation token used for cancelling the task.</param>
        </member>
        <member name="M:UCTask.Worker.WorkerBase.Cycle(System.Threading.CancellationToken)">
            <summary>
            When overrided in a derived class, this method is executed with each cycle of the worker.
            </summary>
            <param name="cancellationToken">The cancellation token that is used to cancel the task operation.</param>
        </member>
        <member name="M:UCTask.Worker.WorkerBase.OnRunEnding">
            <summary>
            Implementing classes can override <see cref="M:UCTask.Worker.WorkerBase.OnRunEnding"/> which is called at the beginning of a stop operation. <see cref="M:UCTask.Worker.WorkerBase.Stop"/>
            </summary>
        </member>
        <member name="P:UCTask.Worker.WorkerBase.DependentWorkers">
            <summary>
            Gets the dependent worker dictionary.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerBase.Finalize">
            <summary>
            Default destructor.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerBase.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the component.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:UCTask.Worker.WorkerException">
            <summary>
            Represents errors that occur during usage of the <see cref="T:UCTask.Worker.WorkerBase"/>.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UCTask.Worker.WorkerException"/> class.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UCTask.Worker.WorkerException"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:UCTask.Worker.WorkerException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:UCTask.Worker.WorkerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:UCTask.Worker.WorkerException"/> class with serialized data.
            </summary>
        </member>
    </members>
</doc>
